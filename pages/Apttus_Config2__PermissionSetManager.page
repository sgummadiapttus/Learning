<!-- 
	Apttus Config & Pricing
	PermissionSetManager

 	@2013-2014 Apttus Inc. All rights reserved.
-->
<apex:page standardController="PermissionSet"
		   extensions="Apttus_Config2.PermissionSetManagerController" 
		   showHeader="true"
		   sidebar="false"
		   cache="false">	
	 
	<apex:includeScript value="{!URLFOR($Resource.Apttus_Config2__JQueryUILibrary19, 'js/jquery-1.8.3.min.js')}"/>
	<apex:includeScript value="{!URLFOR($Resource.Apttus_Config2__JQueryUILibrary19, 'js/jquery-ui-1.9.2.custom.min.js')}"/>
	<apex:includeScript value="{!URLFOR($Resource.Apttus_Config2__JSTreeLibrary, 'jstree-v.pre1.0/jquery.jstree.js')}"/> 
	<script>
  var j$ = jQuery.noConflict();
   	
 	/*
 	 * Functions adpated from CatagoryManager.page for UI functionality
 	 */
 	function showLoadingDiv() {
		determineLocationAndSizeOfOveraly();
		j$('.aptLoadingOverlay').show();
	}
	function hideLoadingDiv() {
		j$('.aptLoadingOverlay').hide();
	}
	function determineLocationAndSizeOfOveraly() {
		//Using 'layover' class to tag the section that should have the overlay. This should be done in CatagoryManager as well.
		var elem = j$('.layover');
		var position = elem.position();
		j$('.aptLoadingOverlay').css( { position: 'absolute', left: position.left, top: position.top });
		j$('.aptLoadingOverlay').width(elem.width());
		j$('.aptLoadingOverlay').height(elem.height()+10);
	}
	function loading(styleClass){
		j$(styleClass).after('<img src="{!URLFOR($Resource.Image_LoadingIcon)}" class="saving-img" alt="{!$Label.Saving}..." />');
		//j$(styleClass).attr('disabled','disabled');
		j$(styleClass).hide();
	}
	function loadComplete(styleClass){
		j$(styleClass).next('img').remove();
		//j$(styleClass).removeAttr('disabled');
		j$(styleClass).show();
	}
	/* End CatagoryManager functions */
	
	/* Used to remove symbols from API Name field.
	   This is performed onfocus to discourage user entering invalid characters.
	   Can also be triggered by double-clicking to fill from src field (label)
	*/
	function autoFormatField(srcClass, destClass, force) {
		var src = j$('.' + srcClass);
		var dest = j$('.' + destClass)
		//If the name field is blank or parameter force is true, build field from src
		var formatted = (dest.attr("value").length < 1 || force) ? src.attr("value") : dest.attr("value");
		//Replace any non-word characters with underscores
		formatted = formatted.split(/[\W|\_]+/).join("_");
		if (formatted.charAt(0) == "_") {
			formatted = formatted.slice(1, formatted.length);
			
		}
		if (formatted.charAt(formatted.length - 1) == "_") {
			formatted = formatted.slice(0, formatted.length - 1);
			
		}
		dest.attr("value", formatted);
	
	}
	
	/* Constructs the json data needed for jsTree to display a list. */
	function buildList(nodes) {
		var builtList = [];
		for (var nodeIndex = 0; nodeIndex < nodes.length; nodeIndex++) {
			var node = nodes[nodeIndex];
			var listItem = new Object();
			listItem.children = node.children;
			listItem.attr = {"Id" : node.Id, "hasImage" : false};
			var shortLabel = node.label;
			if (shortLabel.length > 16) {
				shortLabel = shortLabel.slice(0,13) + "...";
			}
			listItem.data = {"icon" : node.imageUrl, "title" : shortLabel};
			listItem.value = node; 
			builtList.push(listItem);
			
		}
		return builtList;
		
	}
	
	/* Invokes moving a permission set to/from the selected list */
	function addOrRemoveSet(permissionSetId, isRemove) {
		//Immediately hide the add button
		loading('.'+permissionSetId);
		if (isRemove) {
			invokeDoDeselectPermissionSet(permissionSetId);
			
		} else {
			invokeDoSelectPermissionSet(permissionSetId);
			
		}
			
	}
	
	</script>
	
	<apex:stylesheet value="{!URLFOR($Resource.Apttus_Config2__JQueryUILibrary19, 'css/smoothness/jquery-ui-1.9.2.custom.css')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.Apttus_Config2__GridSystemLibrary, '960.css')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.Apttus_Config2__FormeeLibrary, '/css/formee-style.css')}" />
	<apex:stylesheet value="{!URLFOR($Resource.Apttus_Config2__FormeeLibrary, '/css/formee-structure.css')}" />	  
	<apex:stylesheet value="{!URLFOR($Resource.Apttus_Config2__ManagerStyles)}" />	  
	
	<style>
	/*Class customizations to omit some empty space*/
	.no-padding {
		padding: 0px 0px !important;
		margin: 0px 0px 0px !important;
	}
	.wide-button {
		width:45%;
	}
	</style>
	
	<div class="aptLoadingOverlay">
		<div>
			<br/>
			<h2>{!$Label.Loading}...</h2><br/>
				&nbsp;
		</div>
	</div>
	
	<apex:form id="idForm" styleClass="formee container_16 layover aptRoundedDiv">
		<div class="bread-crumb aptGroupHeader">
			<h2>{!$Label.PermissionSetManagerHeader}</h2>
		</div>
		
		<apex:outputPanel id="idErrorMsg">
			<apex:pageMessages />
		</apex:outputPanel>
		
		<apex:outputPanel id="idListWrap" styleClass="grid_3 alpha" layout="block">
			<!--  Buttons for makin more permission sets available -->
			<div class="input-row" id="idListButtons">
				<apex:commandButton value="{!$Label.Apttus_Config2__New}" styleClass="wide-button"
									onclick="invokeNewPermissionSet(); return false;"/>
				<apex:commandButton value="{!$Label.Apttus_Config2__Refresh}" styleClass="wide-button"
									onclick="selectedNodeId='';invokeRefresh(); return false;"/>
			</div>
			
			<!-- Side-bar listing permission sets that have been built. jsTree builds and provides interactivity -->
			<div class="input-row" id="sidelist">
			</div>
			
			<div class="input-row" id="deletedlist">
			</div>
			
			
			<apex:outputPanel id="idReorderWrap" layout="block">
				<script>
					var permSetNodes = new Array();
					var deletedNodes = new Array();
					var selectedNodeId;
				</script>
				<apex:repeat value="{!availablePermissionSets}" var="permSet">
					<script>
					  	permSetNode = new Object();
					  	//Using jsTree to match aesthetic and it provides event handling
					  	permSetNode.label = "{!permSet.permissionSetLabel}";
					  	permSetNode.data = "{!permSet.permissionSetName}"
					  	permSetNode.Id = "{!permSet.permissionSetId}";
					  	permSetNode.level = "0";
					  	permSetNode.parentId = "";
					  	permSetNode.imageUrl = "{!URLFOR($Resource.Image_PermissionSetIcon)}";
			  			permSetNode.leaf = "true";
			  			
					  	permSetNodes.push(permSetNode);
					</script>
				</apex:repeat>
				
				<apex:repeat value="{!deletedPermissionSets}" var="permSet">
					<script>
					  	permSetNode = new Object();
					  	permSetNode.label = "{!permSet.permissionSetLabel}";
					  	permSetNode.data = "{!permSet.permissionSetName}"
					  	permSetNode.Id = "{!permSet.permissionSetId}";
					  	permSetNode.level = "1";
					  	permSetNode.parentId = "idDeletedRoot";
					  	permSetNode.imageUrl = "{!URLFOR($Resource.Image_PermissionSetIcon)}";
			  			permSetNode.leaf = "true";
			  			
					  	deletedNodes.push(permSetNode);
					</script>
				</apex:repeat> 
				
				<script type="text/javascript">
					//Construct list of modifiable sets
					var theTree = { 
							"json_data" : {
							},
							"plugins" : [ "themes", "json_data", "ui" ],
							"core" : {"html_titles" : true},
							"themes" : {
								"icons" : true,
								"dots" : false
							}
						};
					theTree.json_data.data = buildList(permSetNodes);
					
					//Construct folder of deleted sets
					var deletedTree = { 
							"json_data" : {
							},
							"plugins" : [ "themes", "json_data", "ui" ],
							"core" : {"html_titles" : true},
							"themes" : {
								"icons" : true,
								"dots" : false
							}
						};
					var deletedRoot = new Object();
			  	deletedRoot.label = "{!$Label.PermissionSetsDeleted} ({!deletedPermissionSets.size})";
			  	deletedRoot.data = "{!$Label.PermissionSetsDeleted}";
			  	deletedRoot.children = buildList(deletedNodes);
			  	deletedRoot.Id = "idDeletedRoot";
			  	deletedRoot.level = "0";
			  	deletedRoot.parentId = "";
			  	deletedRoot.imageUrl = "{!URLFOR($Resource.Image_Remove_Alt)}";
	  			deletedRoot.leaf = "false";
					deletedTree.json_data.data = buildList([deletedRoot]);
					
					/*Block for binding event listening for the lists*/
					j$(document).ready(function(){
						//
						j$("#sidelist").jstree(theTree).bind("select_node.jstree", 
							function (e, data) { 
								j$("#deletedlist").jstree('deselect_node');								
								newSelectedId = data.rslt.obj.attr("id");
								if (selectedNodeId != newSelectedId) {
									invokeDoEditPermissionSet(newSelectedId);
								}
								selectedNodeId = newSelectedId;
							}
						).bind('loaded.jstree', function(e, data) {
							newSelectedId = "{!editId}";
							j$(this).jstree("select_node", j$('#'+newSelectedId));
						});
						
						j$("#deletedlist").jstree(deletedTree).bind("select_node.jstree", 
							function (e, data) { 
								j$("#sidelist").jstree('deselect_node');
								selectedNodeId = data.rslt.obj.attr("id");
								if (selectedNodeId == 'idDeletedRoot') {
									//May show a div with summary of deleted permission sets and delete-all button.
								} else {
									invokeDoEditPermissionSet(selectedNodeId);
								}
							}
						);
					});
				</script>  
			</apex:outputPanel>	
		</apex:outputPanel>
		<!--  End List -->
		
		<!-- Permission Set Fields-->
		<apex:outputPanel id="idEditPermissionSetWrap" styleClass="grid_8 aptRoundedDiv idEditPermissionSetWrap" layout="block">
			<apex:outputPanel rendered="{!ISBLANK(editWrapper)}" id="idHelp" layout="block" styleClass="hide-on-load">
				<div class="bread-crumb aptGroupHeader">
					<h2>{!$Label.PermissionSetInstructions}</h2>
				</div>
			</apex:outputPanel>
			<apex:outputPanel rendered="{!NOT(ISBLANK(editWrapper))}" id="idEditPermissionSet" layout="block" styleClass="hide-on-load">
				<div class="bread-crumb aptGroupHeader">
					<h2>{!$Label.PermissionSetEdit} {!editWrapper.permissionSetLabel}</h2>
				</div>
				<div id="permission-set-fields">
					<apex:outputPanel styleClass="input-row" layout="block">
						<div class="input-label">
							<apex:outputLabel styleClass="set-label-output" value="{!$ObjectType.PermissionSet.fields.Label.label}"/>
						</div>
						<div class="input-field">
							<apex:inputText styleClass="set-label-input" id="idPermissionSetLabel" 
								 value="{!editWrapper.permissionSetLabel}"/>
						</div>
						<div class="clear"/>
					</apex:outputPanel>
					
					<apex:outputPanel styleClass="input-row" layout="block">
						<div class="input-label">
							<apex:outputLabel styleClass="set-name-output" value="{!$ObjectType.PermissionSet.fields.Name.label}"/>
						</div>
						<div class="input-field">
							<apex:inputText styleClass="set-name-input" id="idPermissionSetName"
								title="Double-click to autofill."
								value="{!editWrapper.permissionSetName}"
								onfocus="autoFormatField('set-label-input','set-name-input');"
								ondblclick="autoFormatField('set-label-input','set-name-input',true);"
								required="true"/>
						</div>
						<div class="clear"/>
					</apex:outputPanel>

					<apex:outputPanel styleClass="input-row" layout="block">
						<div class="input-label">
							<apex:outputLabel styleClass="namespace-filter-output" value="{!$Label.Apttus_Config2__NamespaceFilter}"/>
						</div>
						<div class="input-field">
							<apex:inputText styleClass="namespace-filter-input" id="idNamespaceFilter"
								value="{!editNamespace}"/>
							<apex:image value="{!URLFOR($Resource.Apttus_Config2__Image_Info)}"
													onclick="showNamespaceHelp();"/>
						</div>
						<div class="clear"/>
						<span id="idNamespaceHelp" onclick="showNamespaceHelp();">{!$Label.NamespaceFilterInstructions}</span>
						<script>
							var shown = true;
							function showNamespaceHelp() {
								if (shown) {
									j$('#idNamespaceHelp').hide();
								} else {
									j$('#idNamespaceHelp').show();
								}
								shown = !shown;
							}
							showNamespaceHelp();
						</script>
					</apex:outputPanel>
				</div>
				<div class="clear"/>
				<div class="command-buttons">
					<apex:commandButton value="{!$Label.Apttus_Config2__Save}"
										onclick="invokeBeginSave(); return false;"
										styleClass="save-btn"/>
					
					<apex:commandButton value="{!$Label.Apttus_Config2__PermissionSetAssign}"
										rendered="{!NOT(ISBLANK(AssignId))}"
										onclick="window.open('/{!USER_ASSIGNMENT_PREFIX}?permsetid={!AssignId}', '{!AssignId}'); return false;"/>
					
					<apex:commandButton value="{!$Label.Apttus_Config2__Delete}"
										onclick="invokeDeletePermissionSet(); return false;"
										styleClass="delete-btn"/>
					
										
				</div>
			</apex:outputPanel>
			
			<!-- Taken out of an iframe, tabs for adding and removing permissions -->
			<apex:outputPanel id="idSelectPermissionSetsBlock" rendered="{!NOT(ISBLANK(editWrapper))}">
				<div id="tabs">
					<ul>
						<li class="tab-header"><h2>{!$Label.PermissionSetsAvailable}</h2></li>
						<li><a href="#tabs-1">{!$Label.AddFromPackage}</a></li>
						<li><a href="#tabs-2">{!$Label.AddFromOrg}</a></li>
						<li><a href="#tabs-3">{!$Label.AddFromProfile}</a></li>
					</ul>
					
					<div id="tabs-1">
					<apex:pageBlock >
						<apex:pageBlockTable id="idPackagePermissionSets" title="{!$Label.Apttus_Config2__PackagePermissionSets}" value="{!packagePermissionSetsDisplayList}" var="nextSet">
							<apex:column width="30">
								<apex:commandButton styleClass="{!nextSet.permissionSetId}"
													image="{!URLFOR($Resource.Apttus_Config2__Image_Plus2)}"
													onclick="addOrRemoveSet('{!nextSet.permissionSetId}'); return false;"/>
							</apex:column>
							<apex:column >
								<apex:facet name="header"> {!$Label.Apttus_Config2__PackagePermissionSets} </apex:facet>
								<apex:outputLabel value="{!nextSet.displayLabel}"/>
						   	</apex:column>
						   	<apex:column width="30">
						   		<apex:facet name="header">{!$Label.Apttus_Config2__PermissionSetDetail}</apex:facet>
						   		<apex:outputLink value="/{!nextSet.permissionSetId}" type="image/gif" target="{!nextSet.permissionSetId}">
			  					 	<apex:image value="{!URLFOR($Resource.Apttus_Config2__Image_PermissionSetDetail)}"/>
		 						</apex:outputLink>
						   	</apex:column>
						</apex:pageBlockTable>
					</apex:pageBlock>
					</div>
					
					<div id="tabs-2">
					<apex:pageBlock >
						<apex:pageBlockTable id="idOrganizationPermissionSets" title="{!$Label.Apttus_Config2__PermissionSets}" value="{!permissionSetsDisplayList}" var="nextSet">
							<apex:column width="30">
								<apex:commandButton styleClass="{!nextSet.permissionSetId}"
													image="{!URLFOR($Resource.Apttus_Config2__Image_Plus2)}"
													onclick="addOrRemoveSet('{!nextSet.permissionSetId}'); return false;"/>
							</apex:column>
							<apex:column >
								<apex:facet name="header"> {!$Label.Apttus_Config2__PermissionSets} </apex:facet>
								<apex:outputLabel value="{!nextSet.displayLabel}"/>
						   	</apex:column>
						   	<apex:column width="30">
						   		<apex:facet name="header">{!$Label.Apttus_Config2__PermissionSetDetail}</apex:facet>
						   		<apex:outputLink value="/{!nextSet.permissionSetId}" type="image/gif" target="{!nextSet.permissionSetId}">
			  					 	<apex:image value="{!URLFOR($Resource.Apttus_Config2__Image_PermissionSetDetail)}"/>
		 						</apex:outputLink>
						   	</apex:column>
						</apex:pageBlockTable>
					</apex:pageBlock>
					</div>	
					
					<div id="tabs-3">
					<apex:pageBlock >
						<apex:pageBlockTable id="idProfilePermissionSets" title="{!$Label.Apttus_Config2__ProfilePermissionSets}" value="{!profilePermissionSetsDisplayList}" var="nextSet">
							 <apex:column width="30">
								<apex:commandButton styleClass="{!nextSet.permissionSetId}"
													image="{!URLFOR($Resource.Apttus_Config2__Image_Plus2)}"
													onclick="addOrRemoveSet('{!nextSet.permissionSetId}'); return false;"/>
							</apex:column>
							<apex:column >
								<apex:facet name="header"> {!$Label.Apttus_Config2__ProfilePermissionSets} </apex:facet>
								<apex:outputLabel value="{!nextSet.profileName}"/>
						   	</apex:column>
						   	<apex:column width="30">
						   		<apex:facet name="header">{!$Label.Apttus_Config2__PermissionSetDetail}</apex:facet>
						   		<apex:outputLink value="/{!nextSet.profileId}" type="image/gif" target="{!nextSet.permissionSetId}">
			  					 	<apex:image value="/img/func_icons/util/pencil12.gif"/>
		 						</apex:outputLink>
						   	</apex:column>
						</apex:pageBlockTable>
					</apex:pageBlock>
					</div>
				</div>			 
			</apex:outputPanel>
			<script>
				j$(document).ready(function(){
					j$( "#tabs" ).tabs().addClass( "ui-tabs-vertical ui-helper-clearfix" );
					j$( "#tabs li" ).removeClass( "ui-corner-top" ).addClass( "ui-corner-left" );
					
				});
				
			</script>
			<!-- End frame -->
		</apex:outputPanel>

		<apex:outputPanel id="idParentPermissionSets" styleClass="grid_5 omega aptRoundedDiv" layout="block">
			<div class="bread-crumb aptGroupHeader">
				<h2>{!$Label.PermissionSetSources}</h2>
			</div>
			<apex:pageBlock rendered="{!NOT(ISBLANK(editWrapper))}">
				<apex:pageBlockTable id="idParentTable" value="{!trackedPermissionSets}" var="nextParent" >
					<apex:column >
						<!-- apex:facet name="header"> Included Permission Sets </apex:facet-->
						<apex:outputLabel value="{!nextParent.displayLabel}"/>
				   	</apex:column>
					<apex:column width="30">
					   	<apex:commandButton styleClass="{!nextParent.permissionSetId}"
											image="{!URLFOR($Resource.Apttus_Config2__Image_Remove)}"
					  							onclick="addOrRemoveSet('{!nextParent.permissionSetId}', true); return false;"/>
					</apex:column>
				</apex:pageBlockTable>
			</apex:pageBlock>
			<script>
				j$(document).ready(function(){
					j$(".pbBody").addClass("no-padding");
				});
					
			</script>
		</apex:outputPanel>
		<!--  End Permission Set Fields -->
		
		<!-- Call out to select a permission set for editing -->		
		<apex:actionFunction name="invokeDoEditPermissionSet" 
							 action="{!doEditPermissionSet}"
							 reRender="idEditPermissionSetWrap, idEditPermissionSet, idParentPermissionSets, idErrorMsg"
							 status="loadStatus">
			<apex:param name="permissionSetId" assignTo="{!editId}" value="" />
		</apex:actionFunction>
		
		<!-- Add selected permission set current set's list of parents -->		
		<apex:actionFunction name="invokeDoSelectPermissionSet" 
							 action="{!doSelectPermissionSet}"
							 reRender="idPackagePermissionSets, idParentPermissionSets, idOrganizationPermissionSets, idProfilePermissionSets" >
			<apex:param name="permissionSetId" assignTo="{!selectId}" value="" />
		</apex:actionFunction>
		
		<!-- Remove a selected parent -->		
		<apex:actionFunction name="invokeDoDeselectPermissionSet" 
							 action="{!doDeselectPermissionSet}"
							 reRender="idPackagePermissionSets, idParentPermissionSets, idOrganizationPermissionSets, idProfilePermissionSets" >
			<apex:param name="permissionSetId" assignTo="{!selectId}" value="" />
		</apex:actionFunction>
		
		<!-- Initial call to save performs DML on Permission sObjects and queues batch -->		
		<apex:actionFunction name="invokeBeginSave" 
							 action="{!doBeginSave}"
							 onComplete="invokeCompleteSave(); return false;"
							 status="beginSaveStatus" >
		</apex:actionFunction>
		
		<!-- Finishes the save by uploading PermissionSetRelationship objects & performing new search -->		
		<apex:actionFunction name="invokeCompleteSave" 
							 action="{!doCompleteSave}"
							 reRender="idEditPermissionSetWrap, idEditPermissionSet, idErrorMsg, idPackagePermissionSets, idParentPermissionSets, idProfilePermissionSets, idReorderWrap"
							 status="completeSaveStatus" >
		</apex:actionFunction>
		
		<!-- Creates a new empty set  -->		
		<apex:actionFunction name="invokeNewPermissionSet" 
							 action="{!doNewPermissionSet}"
							 reRender="idEditPermissionSetWrap, idEditPermissionSet, idErrorMsg, idPackagePermissionSets, idParentPermissionSets, idProfilePermissionSets, idReorderWrap"
							 status="loadStatus" >
		</apex:actionFunction>

		<!-- Validates relationship data and refreshes page contents -->		
		<apex:actionFunction name="invokeRefresh" 
							 action="{!doRefresh}"
							 reRender="idEditPermissionSetWrap, idEditPermissionSet, idErrorMsg, idPackagePermissionSets, idParentPermissionSets, idProfilePermissionSets, idReorderWrap"
							 status="loadStatus" >
		</apex:actionFunction>
		
		<!-- Calls markForDelete on current permission set -->		
		<apex:actionFunction name="invokeDeletePermissionSet" 
							 action="{!doDeletePermissionSet}"
							 reRender="idEditPermissionSetWrap, idEditPermissionSet, idErrorMsg, idPackagePermissionSets, idParentPermissionSets, idProfilePermissionSets, idReorderWrap"
							 status="loadStatus" >
		</apex:actionFunction>
		
		<apex:actionStatus id="beginSaveStatus" 
							onStart="showLoadingDiv();" 
							  />
							
		<apex:actionStatus id="completeSaveStatus" 
							onStart="showLoadingDiv();" 
							onStop="determineLocationAndSizeOfOveraly(); hideLoadingDiv();"  />
		
		<apex:actionStatus id="loadStatus" 
							onStart="showLoadingDiv();" 
							onStop="determineLocationAndSizeOfOveraly();hideLoadingDiv();"  />
		
	
	</apex:form>
</apex:page>